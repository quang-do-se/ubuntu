#+STARTUP: showall hidestars
#+TITLE: Ubuntu
#+AUTHOR: Q Do

* Starting Ubuntu 20.04 Focal LTS

** Change permission for home directory

   #+begin_src shell
     sudo chmod -R o-rwx "$HOME"
   #+end_src


** Update/upgrade system

   #+begin_src shell
     sudo apt update

     sudo apt upgrade

     sudo ubuntu-drivers autoinstall
   #+end_src


** Install and set up Git

   #+begin_src shell
     sudo apt install -y git
     git config --global user.email "<email>"
     git config --global user.name "<name>"

     # Create rsa key
     ssh-keygen -t rsa -b 4096 -C "<email>"

     # Copy public key
     cat ~/.ssh/id_rsa.pub | xclip -sel c

     # If error 'sign_and_send_pubkey: signing failed: agent refused operation'
     sudo chmod -R 400 ~/.ssh
     ssh-add

     # Update to latest version
     sudo add-apt-repository -y ppa:git-core/ppa
     sudo apt update
     sudo apt install -y git git-core bash-completion
   #+end_src


** Gnome tweaks
   - Reload dconf

     #+begin_src shell
      git clone git@github.com:qdo-se/ubuntu.git .

      cd ubuntu

      # To import dconf config
      dconf load / < ./dconf-q.conf
     #+end_src

   - Export dconf

     #+begin_src shell
       sudo apt install -y dconf-editor

       # To export current dconf config
       dconf dump / > ./dconf-q.conf

       # Or manually set value for a key
       gsettings set <SCHEMA> <KEY> <VALUE>

       # In case of messing up, reset conf
       gsettings reset <SCHEMA> <KEY>
     #+end_src

     - Note: This can also be accessed in =dconf Editor= app

*** Enable Emacs keybinding in app

    - Note: These are set in *dconf-q.conf* file

    #+begin_src shell
     gsettings set org.gnome.desktop.interface gtk-key-theme "Emacs"

     # switch back
     gsettings set org.gnome.desktop.interface gtk-key-theme "Default"

     # Or edit in
     /usr/share/themes/Emacs/gtk-3.0/gtk-keys.css
    #+end_src

*** Change Keyboard shortcuts in Settings

    - Note: These are set in *dconf-q.conf* file

    - Recommend change all Ctr+Alt to Ctr+Super to avoid conflict in other applications

      - Close window: Ctrl+Super+Escape
      - Maximize window: Ctrl+Super+i
      - Restore Window: Ctrl+Super+k
      - View split on left: Ctrl+Super+j
      - View split on right: Ctrl+Super+l
      - Move window one monitor to the left: Shift+Super+j
      - Move window one monitor to the right: Shift+Super+l
      - Move to workspace above: Super+[
      - Move to workspace below: Super+]
      - Copy a screenshot of an window to clipboard: Ctr+Super+W
      - Copy a screenshot of an area to clipboard: Ctr+Super+C
      - Switch windows of an application: Super+Backlash
      - Launch terminal: Ctr+Super+T
      - Lock screen: Super+Backspace
      - Suspend: Ctr+Super+Backspace
        #+begin_src shell
          systemctl suspend
        #+end_src

*** Change terminal shortcuts

    - Note: These are set in *dconf-q.conf* file

      - Zoom In: Ctrl+=
      - Zoom Out: Ctrl+-
      - New Tab: Ctrl+T
      - Close Tab: Ctrl+W
      - Copy: Alt+W
      - Paste: Ctrl+Y
      - Next Tap: Ctrl+[
      - Previous Tap: Ctr+]


** Set up bash profile with dotfiles

   #+begin_src shell
     git clone git@github.com:qdo-se/dotfiles.git .

     cd dotfiles

     ./install.sh
   #+end_src


** Set up key mapping with autokey-gtk

   #+begin_src shell
     git clone git@github.com:qdo-se/autokey-gtk.git ~/.config/autokey
   #+end_src


** Install GNU Emacs

   #+begin_src shell
     sudo apt update

     sudo apt install -y build-essential texinfo libx11-dev libxpm-dev\
          libjpeg-dev libpng-dev libgif-dev libtiff-dev libncurses-dev\
          libxpm-dev libgtk-3-dev libgnutls28-dev\
          automake autoconf

     wget https://ftp.gnu.org/pub/gnu/emacs/emacs-27.1.tar.gz

     tar -zxvf emacs-27.1.tar.gz

     cd emacs-27.1

     ./configure

     # If a package is missing during `./configure`,
     # search for it using `apt search` or `apt-cache search` and install using `apt install`
     sudo apt search 'libgnutls.*-dev'
     sudo apt search 'libgtk.*-dev'

     make

     # if `make` completes successfully, install emacs
     # By default, Emacs is installed in "/usr/local". To actually install files
     sudo make install

     # Note that `make install` will overwrite "/usr/local/bin/emacs"
     # and any Emacs Info files that might be in "/usr/local/share/info/"

     # For more info, https://www.gnu.org/software/emacs/manual/html_node/efaq/Installing-Emacs.html


     # Make sure desktop icon created at /usr/local/share/applications/emacs.desktop
   #+end_src


** Google Chrome

   #+begin_src shell
     wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -

     sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'

     sudo apt update

     sudo apt install -y google-chrome-stable # --only-upgrade for upgrade

     sudo apt install -y libnss3

     # kill old hidden chrome processes
     sudo pkill -15 google-chrome
     sudo pkill -15 chrome

     # -15 is SIGTERM signal. Use below command a complete list
     kill -l
   #+end_src

*** Turn off network cache that automatically adds =.com= and =www.= to url

    - Go to Chrome
    - Click *F12*
    - Go to *Network* tab
    - Choose *Disable cache*


** Utility tools

   #+begin_src shell
     # Optional: switch off key repeat
     # xset r off


     # Terminator and vim
     sudo apt install -y terminator vim


     # Chkrootkit and net-tools
     sudo apt install -y chkrootkit net-tools


     # Install autokey-gtk - great tool for key binding in Xorg
     sudo apt install -y autokey-gtk


     # Ulauncher for quick search
     sudo add-apt-repository -y ppa:agornostal/ulauncher
     sudo apt update
     sudo apt install -y ulauncher


     # Install locate
     sudo apt install -y mlocate


     # Install a clip board manager
     sudo apt install -y xclip


     # Change shortcut for *Show/hide main window* to *Ctrl+Super+Y*
     sudo apt install -y copyq


     # PDF viewer
     sudo apt install -y evince


     # tree ls
     sudo apt install -y tree


     # CPU temp and fan speed
     sudo apt install -y lm-sensors


     # Nice version of top
     sudo npm install -y gtop -g


     # Nice version of top
     sudo apt install -y htop


     # JSON parser
     sudo apt install -y jq


     # Image editor
     sudo apt install -y gimp


     # Install OpenConnect VPN
     # Usage: sudo openconnect -b [vpn.mydomain.com] -u [username] --authgroup [AdminVPN]
     sudo apt install -y openconnect


     # Bluetooth update if needed
     sudo add-apt-repository ppa:bluetooth/bluez
     sudo apt install -y bluez


     # Install music/video player
     sudo add-apt-repository -y ppa:rvm/smplayer
     sudo apt update
     sudo apt install -y mpv mplayer smplayer smplayer-themes smplayer-skins


     # Ag search
     sudo apt install -y silversearcher-ag


     # Virtual Box
     sudo apt purge virtualbox-6.1

     sudo sh -c 'echo "deb [arch=amd64] https://download.virtualbox.org/virtualbox/debian <ubuntu-dist> contrib" >> /etc/apt/sources.list'

     wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add -
     wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add -

     # Verify fingerprint
     # gpg version 2 or later
     gpg --dry-run --quiet --import --import-options import-show oracle_vbox_2016.asc | awk 'NR==2 {print $1}' | sed 's/.\{4\}/& /g'

     sudo apt update
     sudo apt install -y virtualbox-6.1

     # Then download and install virtualbox extension package from the website https://www.virtualbox.org/wiki/


     # pdflatex
     sudo apt install -y texlive-latex-base texlive-fonts-recommended texlive-fonts-extra texlive-latex-extra


     # cheese - take photos and videos with your webcam
     sudo apt install -y cheese


     # Native antivirus
     sudo apt install -y clamav


     # exFAT drive support
     sudo apt install -y exfat-fuse exfat-utils


     # Remove package
     sudo apt purge <package>


     # Remove unused packages
     sudo apt autoremove


     # Install general package with dependencies
     sudo apt install <package.deb>
     # Or
     sudo dpkg -i <package.deb>
     sudo apt --fix-broken install
   #+end_src


** Gnome Extensions
   - If =Extensions= app is not available, install it:

     #+begin_src shell
      sudo apt install -y gnome-shell-extension-prefs gnome-shell-extensions
     #+end_src

*** Hide Desktop Icons

    - Go to =Extensions= app
    - Disable =Desktop Icons=

*** Hide top bar

    #+begin_src shell
      sudo apt install -y gnome-shell-extension-autohidetopbar
    #+end_src

    - Restart
    - Go to =Extensions= app or =Tweaks= app under =Extensions= tab
    - Enable =Hide Top Bar=

*** Hide app title bar

    #+begin_src shell
      sudo apt install -y gnome-shell-extension-pixelsaver
    #+end_src

    - Restart
    - Go to =Extensions= app
    - Enable =Pixel Saver=

** Mouse: default natural scrolling

   - Add =Option "NaturalScrolling" "true"= to =/usr/share/X11/xorg.conf.d/40-libinput.conf= and reboot

   #+begin_src conf
     Section "InputClass"
       Identifier "libinput pointer catchall"
       MatchIsPointer "on"
       MatchDevicePath "/dev/input/event*"
       Driver "libinput"
       Option "NaturalScrolling" "true"
     EndSection
   #+end_src

   - Note: Only work with Xorg


** Add Startup applications

   #+begin_src shell
     cp -rf ./autostart ~/.config
   #+end_src

   - Or set it manually in "Startup Applications"

** Setting Vietnamese Unikey

   #+begin_src shell
     # Install ibus and set ibus as default input method
     sudo apt install -y ibus
     im-config -n ibus

     # install ibus-bamboo, which can be better than ibus-unikey
     sudo add-apt-repository ppa:bamboo-engine/ibus-bamboo
     sudo apt update
     sudo apt install -y ibus-bamboo

     ibus restart

     ibus-daemon -Rd


     # Optional - this should be in dconf-q.conf
     gsettings set org.gnome.desktop.input-sources sources "[('xkb', 'us'), ('ibus', 'BambooUs')]"
   #+end_src


** Install Java JDK

   #+begin_src shell
     # Install default latest version
     sudo apt install -y default-jdk

     # Install specific version
     sudo apt install -y openjdk-8-jdk

     # Set Java 8 as default Java
     sudo update-alternatives --set java \
          $(update-alternatives --list java | grep -E '\-8(\.[[:digit:]]*)?\-')

     sudo update-alternatives --set javac \
          $(update-alternatives --list javac | grep -E '\-8(\.[[:digit:]]*)?\-')

     # OR
     sudo update-alternatives --config java
     sudo update-alternatives --config javac
   #+end_src


** Install Node.js

   #+begin_src shell
     # Make sure to set $NPM_CONFIG_PREFIX and $N_PREFIX

     sudo apt install -y nodejs npm

     # Install node version manager
     npm install -g n

     # Remove install nodejs and npm in /usr/local
     sudo apt purge -y nodejs npm

     # Let n manage nodejs and npm
     n lts

     # Update npm
     npm install -g npm@latest
   #+end_src


** Install docker

   #+begin_src shell
     # Set up the repository
     sudo apt update
     sudo apt upgrade

     sudo apt install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
     sudo apt remove docker docker-engine docker.io containerd runc

     # Review key: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dry-run --quiet --import --import-options import-show
     curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

     # Confirm if key is added. If key is not added, add-apt-repository will fail
     # Remove key: apt-key del 0EBFCD88
     sudo apt-key fingerprint 0EBFCD88

     # Remove repository: add-apt-repository --remove
     sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

     # Install docker engine - community
     sudo apt update
     sudo apt install -y docker-ce docker-ce-cli containerd.io

     # Install docker-compose
     sudo curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
     sudo chmod +x /usr/local/bin/docker-compose

     # Add user to docker group to be able to run docker
     sudo groupadd docker
     sudo usermod -aG docker ${USER}

     # login to the docker group. Reboot will fix the issue with group
     newgrp docker



     # # Enable start on boot
     sudo systemctl enable docker.service
     sudo systemctl enable docker.socket
     sudo systemctl enable containerd.service



     # # Disable start on boot
     # sudo systemctl disable docker.service
     # sudo systemctl disable docker.socket
     # sudo systemctl disable containerd.service



     # # Stop docker daemon
     # sudo systemctl stop docker
     # sudo systemctl stop containerd



     # # Start docker daemon
     # sudo systemctl start docker
     # sudo systemctl start containerd



     # sudo service docker start
     # sudo service containerd start



     # Confirm
     systemctl list-unit-files  | grep -iE "(containerd|docker)"
   #+end_src


** Install nordvpn

   #+begin_src shell
     sh <(curl -sSf https://downloads.nordcdn.com/apps/linux/install.sh)

     # Add nordvpn group to your system
     sudo groupadd -r nordvpn

     # Add the <user account> you sign into Linux to the nordvpn group
     sudo gpasswd -a <username> nordvpn

     sudo systemctl enable --now nordvpnd.service

     nordvpn set cybersec on

     nordvpn set killswitch on

     nordvpn set autoconnect on

     nordvpn login

     nordvpn connect

     # Don't update package
     sudo apt-mark hold nordvpn
   #+end_src


** Add user

   #+begin_src shell
     # Add new user
     sudo adduser [username]

     # Add user to sudo group
     usermod -aG sudo [username]

     # Delete user
     sudo deluser --remove-home [username]

     # Enable root password
     sudo passwd root

     # Disable root account
     sudo passed -dl root
   #+end_src


** Clean up

   #+begin_src shell
     rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
   #+end_src


** Graphics card

*** Check which graphics card is being used

    #+begin_src shell
      lspci -k | grep -A 2 -i "VGA"

      lshw -C video

      prime-select query
    #+end_src

*** Install drivers

    #+begin_src shell
      # Update to latest drivers
      sudo ubuntu-drivers autoinstall

      sudo ubuntu-drivers devices

      # Check which driver is recommended and install
      sudo apt install -y <driver>
    #+end_src

*** Switch graphics card

    #+begin_src shell
      # Switch to Intel graphics card
      sudo prime-select intel

      # Switch to Nvidia graphics card
      sudo prime-select nvidia

      # Open Nvidia UI settings
      nvidia-settings
    #+end_src

*** Uninstall Nvidia Drivers
    #+begin_src sh
      sudo apt purge nvidia-* -y
    #+end_src


** Check cron

   #+begin_src sh
     # Current user crontab
     crontab -l

     # crontab of a specific user
     sudo crontab -u <user> -l

     # All users crontabs, except root
     sudo ls -al /var/spool/cron/crontabs

     # root crontab
     less /etc/crontab

     ls -la /etc/cron.hourly
     ls -la /etc/cron.daily
     ls -la /etc/cron.weekly
     ls -la /etc/cron.monthly
   #+end_src


** Firefox

*** Adjust system font size
    - Type =about:config= in address bar
    - Set =layout.css.devPixelsPerPx= to 1.20

** Handle broken Linux Kernel

*** Enable Grub menu on boot

    - Backup

      #+begin_src sh
        sudo cp /etc/default/grub /etc/default/grub.backup
      #+end_src

    - Edit /etc/default/grub

      #+begin_src conf
        # Change this
        GRUB_TIMEOUT_STYLE=menu
      #+end_src

      #+begin_src sh
        sudo update-grub
        sudo reboot
      #+end_src

    - Once in grub menu, choose *Advanced options* and select kernel version that works
    - Once booted, try to fix the broken kernel

*** Try to reinstall kernel

    #+begin_src sh
      # Take a look to see which kernels are already installed
      ls -al /lib/modules
      dpkg --list | grep linux-image


      # If you have no kernel to fallback, install a signed kernel
      sudo apt update
      sudo apt-cache search linux-image | grep -i 'signed kernel image generic'

      sudo apt install linux-image-<kernel-version>-generic
      sudo apt install linux-headers-<kernel-version>-generic
      sudo apt install linux-modules-<kernel-version>-generic


      # Trying to fix current kernel
      sudo apt install --reinstall linux-image-$(uname -r)
      sudo apt install --reinstall linux-headers-$(uname -r)
      sudo apt install --reinstall linux-modules-$(uname -r)

      sudo ubuntu-drivers autoinstall


      # Worst case, remove the broken kernel
      sudo apt purge linux-image-<kernel-version>
      sudo apt purge linux-headers-<kernel-version>
      sudo apt purge linux-modules-<kernel-version>


      # More info: https://help.ubuntu.com/community/RemoveOldKernels


      sudo update-grub
      sudo reboot
    #+end_src

*** Prevent kernel upgrade (potentially unsafe)

    #+begin_src sh
      # Only do this when you know what you're doing
      # Holding kernel upgrade is usually not a good idea for security
      sudo apt-mark hold $(uname -r)


      # Unhold
      sudo apt-mark unhold $(uname -r)
    #+end_src

*** Set Grub default (optional)

    - Get Grub menu entries

      #+begin_src sh
        grep gnulinux /boot/grub/grub.cfg | grep -iE "^[[:space:]]+menuentry" | cut -d "'" -f2
      #+end_src

    - Update /etc/default/grub

      #+begin_src conf
        # Change this to target menu entry
        GRUB_DEFAULT="Advanced options for Ubuntu>Ubuntu, with Linux <kernel-version>"
      #+end_src

      #+begin_src sh
        sudo update-grub
        sudo reboot
      #+end_src
** Scan system

   #+begin_src sh
     sudo clamscan -r --bell -i --remove=yes /

     sudo chkrootkit

     # Display all TCP and UDP ports with attached process
     sudo netstat -peanut
     # Or display listening ports only
     sudo netstat -pelnut
   #+end_src


** Remove snap (optional)

   #+begin_src sh
     # List all packages
     snap list


     sudo snap remove --purge package-name

     # Remove all packages in order
     sudo snap remove snap-store
     sudo snap remove gtk-common-themes
     sudo snap remove gnome-3-34-1804
     sudo snap remove core18
     sudo snap remove snapd


     # Remove snap
     sudo apt purge snapd


     rm -rf ~/snap
     sudo rm -rf /snap
     sudo rm -rf /var/snap
     sudo rm -rf /var/lib/snapd
     sudo rm -rf /var/cache/snapd/
   #+end_src

** Install python, pip and pipenv

*** Manage python versions

    #+begin_src shell
     sudo apt install -y python3

     # If you have multiple Python versions, use update-alternatives to manage them
     # Alternatively, you can use 'pyenv'
     sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1
     sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 2
     sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.9 3

     sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1
     sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 2

     # List Python versions
     update-alternatives --list python

     # Choose a version
     sudo update-alternatives --config python
    #+end_src

*** Install pipenv

    #+begin_src shell
      # https://packaging.python.org/en/latest/guides/tool-recommendations/
      # https://docs.python.org/3/library/venv.html

      # Changed in version 3.5: The use of venv is now recommended for creating virtual environments.
      # virtualenv supports older python versions and has a few more minor unique features, while venv is in the standard library.

      sudo apt install -y python3-pip python3-venv python3-tk

      # Install and upgrade pip, pipenv
      python3 -m pip install --user --upgrade pip pipenv
    #+end_src

** Recovery step for accident apt remove or purge

   #+begin_src shell
     # WARNING: NEVER use 'apt purge' or 'remove python'

     # Ctrl+Alt+F3 to F6: Use virtual console/shell to recover

     # Ctrl+Alt+F1: Login screen
     # Ctrl+Alt+F2: GUI session


     # Check what were removed
     less /var/log/apt/history.log

     sudo apt install ubuntu-desktop

     sudo apt --fix-broken install
   #+end_src
